/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doantest;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.json.JSONObject;
import org.json.JSONArray;

/**
 *
 * @author Hieu Nguyen
 */
public class SearchPaper extends javax.swing.JFrame {

    /**
     * Creates new form SearchPaper
     */
    public SearchPaper() {
        initComponents();
        // Set JFrame vào giữa màn hình
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        button1 = new java.awt.Button();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setPreferredSize(new java.awt.Dimension(900, 600));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jSpinner1.setMinimumSize(new java.awt.Dimension(30, 20));

        jSpinner2.setMinimumSize(new java.awt.Dimension(30, 20));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        button1.setLabel("Search");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Search Filter");
        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        display(1983, 1985);
    }//GEN-LAST:event_button1ActionPerformed

    private void display(int startYear, int endYear) {
        //Tạo Graph từ GraphStream
        Graph graph = new SingleGraph("Citation");
        // Kết nối
        Connection con;
        try {
            con = DriverManager.getConnection("jdbc:neo4j:bolt://localhost:11005", "neo4j", "123");
            PreparedStatement stmt = null;
            // Querying
//            String querry = "MATCH (p:Paper) WHERE p.Year = " + year + " RETURN p LIMIT 10";
            String querry = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[:RELATED_TO]->(t:Topic) WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " AND t.TopicId = 43 RETURN p1, p2, t LIMIT 5";
            
            stmt = con.prepareStatement(querry);
            ResultSet rs = stmt.executeQuery();
            
            Random random;
            String colorCode;
            //Lấy dữ liệu về 
            while (rs.next()) {
                System.out.println("p1: " + rs.getString("p1"));
                System.out.println("p2: " + rs.getString("p2"));
                
                random = new Random();
                 //In node với màu ngẫu nhiên 
                colorCode = String.format("#%06x", random.nextInt(256*256*256));
                graph.addAttribute("ui.stylesheet", "node:clicked { size: 40px, 40px; text-background-mode: plain; text-background-color: black; text-mode: normal; text-color: white; text-alignment: at-right; text-padding: 3; text-size: 15;} edge { arrow-shape: arrow; }");
                
                
                //Chuyển thành JSON
                JSONObject p1Obj = new JSONObject(rs.getString("p1"));
                String nodeIdP1 = String.valueOf(p1Obj.getInt("id"));
                JSONArray labelArray = p1Obj.getJSONArray("labels");
                String nodeLabelP1 = "";
                for(int i = 0; i < labelArray.length(); i++){
                    nodeLabelP1 += labelArray.getString(i) + " ";
                }
                         
                if(graph.getNode(nodeIdP1) == null) {
                    graph.addNode(nodeIdP1);
                    graph.getNode(nodeIdP1).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
                    graph.getNode(nodeIdP1).addAttribute("ui.label", "Label: " + nodeLabelP1 + ", ID: " + nodeIdP1);
                    graph.getNode(nodeIdP1).addAttribute("ui.style", "fill-color: #96c95c; size: 30px, 30px; stroke-mode: plain; stroke-color: #8bc34a; stroke-width: 2px; text-mode: hidden;");
                }
                JSONObject p2Obj = new JSONObject(rs.getString("p2"));
                String nodeIdP2 = String.valueOf(p2Obj.getInt("id"));
                if(graph.getNode(nodeIdP2) == null) {
                    graph.addNode(nodeIdP2);
                    JSONArray labelArrayP2 = p2Obj.getJSONArray("labels");
                    String nodeLabelP2 = "";
                    for(int i = 0; i < labelArrayP2.length(); i++){
                        nodeLabelP2 += labelArrayP2.getString(i) + " ";
                    }
                    graph.getNode(nodeIdP2).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
                    graph.getNode(nodeIdP2).addAttribute("ui.label",  "Label: " + nodeLabelP2 + ", ID: " + nodeIdP2);
                    graph.getNode(nodeIdP2).addAttribute("ui.style", "fill-color: #96c95c; size: 30px, 30px; stroke-mode: plain; stroke-color: #8bc34a; stroke-width: 2px; text-mode: hidden;");

                }
                
                JSONObject tObj = new JSONObject(rs.getString("t"));
                String nodeIdT = String.valueOf(tObj.getInt("id"));
                if(graph.getNode(nodeIdT) == null) {
                    graph.addNode(nodeIdT);
                    JSONArray labelArrayT = tObj.getJSONArray("labels");
                    String nodeLabelT = "";
                    for(int i = 0; i < labelArrayT.length(); i++){
                        nodeLabelT += labelArrayT.getString(i) + " ";
                    }
                    graph.getNode(nodeIdT).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
                    graph.getNode(nodeIdP2).addAttribute("ui.label",  "Label: " + nodeLabelT + ", ID: " + nodeIdT);
                    graph.getNode(nodeIdT).addAttribute("ui.style", "fill-color: #ff7575; size: 30px, 30px; stroke-mode: plain; stroke-color: #ff6666; stroke-width: 2px; text-mode: hidden;");
                }
                
                // Nếu chưa có Edge thì thêm Edge
                if(graph.getEdge(nodeIdP1 + nodeIdP2) == null) {
                    graph.addEdge(nodeIdP1 + nodeIdP2, nodeIdP1, nodeIdP2);
                    graph.getEdge(nodeIdP1 + nodeIdP2).addAttribute("ui.style", "fill-color: red;");
                }
                if(graph.getEdge(nodeIdP1 + nodeIdT) == null) {
                    graph.addEdge(nodeIdP1 + nodeIdT, nodeIdP1, nodeIdT);
                    graph.getEdge(nodeIdP1 + nodeIdT).addAttribute("ui.style", "fill-color: blue; arrow-shape: arrow; arrow-size: 2;");
                }
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(DoAnTest.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Tạo View Panel để chứa Graph
//        Viewer viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
//        ViewPanel viewPanel = viewer.addDefaultView(false);

        //Panel chứa viewpanel
        jPanel2.add(graph.display().getDefaultView());
//        jPanel2.add(graph.display().addDefaultView(false));

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchPaper().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables
}
