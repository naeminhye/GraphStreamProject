/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doantest;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.json.JSONObject;
import org.json.JSONArray;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import doantest.style.StyleImporter;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSetMetaData;
import java.util.Arrays;
import java.util.Map;
import javax.swing.event.MouseInputListener;
import org.graphstream.ui.graphicGraph.GraphicGraph;
import org.graphstream.ui.graphicGraph.GraphicNode;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.ViewerListener;
import org.graphstream.ui.view.ViewerPipe;
import org.graphstream.ui.view.util.MouseManager;

/**
 *
 * @author Hieu Nguyen
 */
public class SearchPaper extends javax.swing.JFrame {
    /**
     * Creates new form SearchPaper
     */
    public SearchPaper() {
        initComponents();
        // Set JFrame vào giữa màn hình
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        // Set giá trị mặc định cho 2 number box startYear và endYear
        endYear.setValue(1981);        
        startYear.setValue(1980);
        
        

    }
    
    private enum TypeOfNode {
        PAPER,
        TOPIC
    }
    
    private enum TypeOfRelationship {
        RELATED_TO,
        CITES
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        startYear = new javax.swing.JSpinner();
        endYear = new javax.swing.JSpinner();
        topicSelection = new javax.swing.JComboBox<>();
        displaySeletion = new javax.swing.JComboBox<>();
        button1 = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        startYear.setMinimumSize(new java.awt.Dimension(30, 20));

        endYear.setMinimumSize(new java.awt.Dimension(30, 20));

        topicSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "43", "44" }));

        displaySeletion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Graph", "Time Column" }));

        button1.setLabel("Search");
        button1.setName("searchBtn"); // NOI18N
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("From");

        jLabel2.setText("To");

        jLabel3.setText("Topic");

        jLabel4.setText("Display");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topicSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(startYear, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(endYear, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(displaySeletion, 0, 140, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startYear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endYear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topicSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displaySeletion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Search Filter");
        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // Hiển thị các Node và Edge sau khi click vào button "Search"
        display((int)startYear.getValue(), (int)endYear.getValue(), (String)topicSelection.getSelectedItem());
//           newDisplay((int)startYear.getValue(), (int)endYear.getValue(), (String)topicSelection.getSelectedItem());
    }//GEN-LAST:event_searchBtnActionPerformed
    
    
    
    private String addNodeToGraph(Graph graph, JSONObject nodeObj, String color) {
        
        String NodeId = String.valueOf(nodeObj.getInt("id"));
//        System.out.println("Node ID *: " + nodeIdP1);

        String NodeLabel = nodeObj.getJSONArray("labels").getString(0);
        Random random = new Random();
        
        if(graph.getNode(NodeId) == null) {
            graph.addNode(NodeId);
            graph.getNode(NodeId).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
            graph.getNode(NodeId).addAttribute("ui.label", "Label: " + NodeLabel + ", ID: " + NodeId);
            switch(NodeLabel) {
                case "Paper":
                    graph.getNode(NodeId).addAttribute("ui.style", "fill-color: #fb9692, #ff7575; size: 30px, 30px; stroke-mode: plain; stroke-color: #f84f48;text-mode: hidden; shape: pie-chart;");
                    graph.getNode(NodeId).addAttribute("ui.pie-values", Utils.printString(new String[]{"0.5", "0.5"}, ","));
                    break;
                case "Topic":
                    graph.getNode(NodeId).addAttribute("ui.style", "fill-color: " + color + "; size: 40px, 40px; stroke-mode: plain; stroke-color: #8ab3cd; stroke-width: 3px; text-mode: hidden;");
                    break;
                default:
                    break;
            }
        }
        return NodeId;
    }
    
    private void addEdgeToGraph(Graph graph, String SourceNodeId, String TargetNodeId, TypeOfRelationship type) {
        if(graph.getEdge(SourceNodeId + TargetNodeId) == null) {
            graph.addEdge(SourceNodeId + TargetNodeId, SourceNodeId, TargetNodeId);
            switch(type) {
                case RELATED_TO:
                    graph.getEdge(SourceNodeId + TargetNodeId).addAttribute("ui.style", "fill-color: blue; shape: line; arrow-size: 3px, 2px;");
                    break;
                case CITES:
                    graph.getEdge(SourceNodeId + TargetNodeId).addAttribute("ui.style", "fill-color: red;");
                    break;
                default:
                    graph.getEdge(SourceNodeId + TargetNodeId).addAttribute("ui.style", "fill-color: black;");
                    break;
            }
            
        }
    }
    
    private void display(int startYear, int endYear, String topic) {
        
        //Tạo Graph từ GraphStream
        Graph graph = new SingleGraph("Citation");
        Random random;
        String colorCode;
        // Kết nối
        Connection con;
        try {
            con = DriverManager.getConnection("jdbc:neo4j:bolt://localhost:11005", "neo4j", "123");
            PreparedStatement stmt = null, subStmt = null;
            // Querying
//            String querry = "MATCH (p:Paper) WHERE p.Year = " + year + " RETURN p LIMIT 10";
            String query = "";
            Node nodeP1 = null;
            
            // Hiển thị tất cả các chủ đề 
            if(topic.equals("All"))
            {
                query = "MATCH (p1:Paper)-[r:RELATED_TO]->(t:Topic) WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " RETURN p1, t, r.Proportion AS prop LIMIT 3";
//                query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic) WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " RETURN p1, p2, t, r.Proportion AS propotion LIMIT 5";
//                query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic)  WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " RETURN p1,collect({ paper: p2 }) AS paperCitedFrom, collect({ topic: t, proportion: r.Proportion }) AS topicRelationship LIMIT 3";
            }
            else {
                query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic) WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " AND t.TopicId = " + topic + " RETURN p1, p2, t, r.Proportion AS propotion LIMIT 5";
//                query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic)  WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " AND t.TopicId = 43 RETURN p1,collect({ paper: p2 }) AS paperCitedFrom, collect({ topic: t, proportion: r.Proportion }) AS topicRelationship LIMIT 3";
            }
            
            stmt = con.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            double[] proportion = new double[3];
            String[] colors = new String[3];

            int index = 0;
            //Lấy dữ liệu về 
            while (rs.next()) {
                random = new Random();
//                Map<String, Object> e = (Map<String, Object>) rs.getObject("p1");
//                System.out.println("PaperId: " + e.get("PaperId"));
                
                 //In node với màu ngẫu nhiên 
                colorCode = String.format("#%06x", random.nextInt(256*256*256));

                // Import style từ file css thông qua lớp StyleImporter
                String style = StyleImporter.getStyle("style.css");
                // Add style vào graph
                graph.addAttribute("ui.stylesheet", style);
                
                //Chuyển thành JSON
//                JSONObject nodeObj = new JSONObject(rs.getString("p1"));
//                String NodeId = String.valueOf(nodeObj.getInt("id"));
                String nodeP1Id = addNodeToGraph(graph, new JSONObject(rs.getString("p1")), "");
//                String nodeP2Id = addNodeToGraph(graph, new JSONObject(rs.getString("p2")));
                nodeP1 = (Node)graph.getNode(nodeP1Id);
                System.out.println("[NODE P1 TO STRING] " + nodeP1.toString()); //getOutDegree
                String nodeTId = addNodeToGraph(graph, new JSONObject(rs.getString("t")), colorCode);
                String prop = String.valueOf(rs.getDouble("prop"));
                System.out.println("prop: " + prop);
                proportion[index] = rs.getDouble("prop");
                colors[index] = colorCode;
                index ++;
                
//                addEdgeToGraph(graph, nodeP1Id, nodeP2Id, TypeOfRelationship.CITES);
                addEdgeToGraph(graph, nodeP1Id, nodeTId, TypeOfRelationship.RELATED_TO);

//                String nodeTId = addNodeToGraph(graph, new JSONObject(rs.getString("t")));
//                if(graph.getEdge(nodeP1Id + nodeTId) == null) {
//                    graph.addEdge(nodeP1Id + nodeTId, nodeP1Id, nodeTId);
//                    graph.getEdge(nodeP1Id + nodeTId).addAttribute("ui.style", "fill-color: blue; shape: line; arrow-size: 3px, 2px;");
//                }  
//                if(graph.getNode(nodeIdP1) == null) {
//                    
//                    graph.addNode(nodeIdP1);
//                    graph.getNode(nodeIdP1).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
//                    graph.getNode(nodeIdP1).addAttribute("ui.label", "Label: " + nodeLabelP1 + ", ID: " + nodeIdP1);
//                    graph.getNode(nodeIdP1).addAttribute("ui.style", "fil
//                addEdgeToGraph(graph, nodeP1Id, nodeP2Id, TypeOfRelationship.CITES);
                addEdgeToGraph(graph, nodeP1Id, nodeTId, TypeOfRelationship.RELATED_TO);

//                String nodeTId = addNodeToGraph(graph, new JSONObject(rs.getString("t")));
//                if(graph.getEdge(nodeP1Id + nodeTId) == null) {
//                    graph.addEdge(nodeP1Id + nodeTId, nodeP1Id, nodeTId);l-color: " + Utils.printString(new String[]{"#fb9692", "#ff7575"}, ",") + "; size: 30px, 30px; stroke-mode: plain; stroke-color: #f84f48;text-mode: hidden; shape: pie-chart;");
////                    graph.getNode(nodeIdP1).addAttribute("ui.pie-values", "0.5, 0.5");
//                    graph.getNode(nodeIdP1).addAttribute("ui.pie-values", Utils.printString(new String[]{"0.5", "0.5"}, ","));
//
//                }
//                JSONObject p2Obj = new JSONObject(rs.getString("p2"));
//                String nodeIdP2 = String.valueOf(p2Obj.getInt("id"));
//                JSONArray labelArrayP2 = p2Obj.getJSONArray("labels");
//                String nodeLabelP2 = "";
//                for(int i = 0; i < labelArrayP2.length(); i++){
//                    nodeLabelP2 += labelArrayP2.getString(i) + " ";
//                }
//                addNodeToGraph(graph, nodeIdP2, nodeLabelP2);
//                if(graph.getNode(nodeIdP2) == null) {
//                    graph.addNode(nodeIdP2);
//                    graph.getNode(nodeIdP2).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
//                    graph.getNode(nodeIdP2).addAttribute("ui.label",  "Label: " + nodeLabelP2 + ", ID: " + nodeIdP2);
//                    graph.getNode(nodeIdP2).addAttribute("ui.style", "fill-color: #fb9692; size: 30px, 30px; stroke-mode: plain; stroke-color: #f84f48; stroke-width: 2px; text-mode: hidden;");
//                }
                
                // Tạo node Topic nếu chưa có node đó
//                JSONObject tObj = new JSONObject(rs.getString("t"));
//                String nodeIdT = String.valueOf(tObj.getInt("id"));
//                JSONArray labelArrayT = tObj.getJSONArray("labels");
//                String nodeLabelT = "";
//                for(int i = 0; i < labelArrayT.length(); i++){
//                    nodeLabelT += labelArrayT.getString(i) + " ";
//                }
//                addNodeToGraph(graph, nodeIdT, nodeLabelT);
//                if(graph.getNode(nodeIdT) == null) {
//                    graph.addNode(nodeIdT);
//                    graph.getNode(nodeIdT).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
//                    graph.getNode(nodeIdT).addAttribute("ui.label",  "Label: " + nodeLabelT + ", ID: " + nodeIdT);
//                    graph.getNode(nodeIdT).addAttribute("ui.style", "fill-color: #c0d6e4; size: 40px, 40px; stroke-mode: plain; stroke-color: #8ab3cd; stroke-width: 3px; text-mode: hidden;");
//                }
                
                // Nếu chưa có Edge thì thêm Edge
//                if(graph.getEdge(nodeIdP1 + nodeIdP2) == null) {
//                    graph.addEdge(nodeIdP1 + nodeIdP2, nodeIdP1, nodeIdP2);
//                    graph.getEdge(nodeIdP1 + nodeIdP2).addAttribute("ui.style", "fill-color: red;");
//                }
                
                
            }
            System.out.println("proportion: " + Arrays.toString(proportion));
                
            nodeP1.addAttribute("ui.style", "fill-color: " + Utils.printString(colors, ",") + "; size: 30px, 30px; stroke-mode: plain; stroke-color: #f84f48;text-mode: hidden; shape: pie-chart;");
            nodeP1.addAttribute("ui.pie-values", Utils.doubleArraytoString(proportion, ","));
        
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Tạo View Panel để chứa Graph
        Viewer viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        viewer.enableAutoLayout(); // cho graph chuyển động 
        
        ViewPanel viewPanel = viewer.addDefaultView(false);

        jPanel2.removeAll();
        jPanel2.setLayout(new GridLayout());
        //Panel chứa graph
        jPanel2.add(viewPanel);
        jPanel2.revalidate();
        
        // Xử lí sự kiện về Mouse của View Panel
        ViewerPipe fromViewer = viewer.newViewerPipe();
        fromViewer.addSink(graph);
        fromViewer.addViewerListener(new MouseHandler(graph, viewPanel, fromViewer));
//        viewPanel.addMouseListener(new MouseHandler(graph, viewer));
}
    
    private void newDisplay(int startYear, int endYear, String topic) {
        
        //Tạo Graph từ GraphStream
        Graph graph = new SingleGraph("Citation2");
        Random random;
        // Kết nối
        Connection con;
        try {
            con = DriverManager.getConnection("jdbc:neo4j:bolt://localhost:11005", "neo4j", "123");
            PreparedStatement stmt = null;
            String query = "";
            
            // Hiển thị tất cả các chủ đề 
            if(topic.equals("All"))
            {
                //query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic) WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " RETURN p1, p2, t, r.Proportion AS propotion LIMIT 5";
                query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic) "
                        + "WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " "
                        + "WITH p1,  t, r, collect({ paper: p2 }) AS paperCitedFrom "
                        + "ORDER BY paperCitedFrom LIMIT 3 "
                        + "WITH p1, paperCitedFrom, collect({ topic: t, proportion: r.Proportion }) AS topicRelationship "
                        + "ORDER BY topicRelationship LIMIT 3 "
                        + "RETURN p1, paperCitedFrom, topicRelationship LIMIT 5";
            }
            else {
                //query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic) WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND p2.Year >= " + startYear + " AND p2.Year <= " + endYear + " AND t.TopicId = " + topic + " RETURN p1, p2, t, r.Proportion AS propotion LIMIT 5";
                query = "MATCH (p1:Paper)-[:CITES]->(p2:Paper), (p1)-[r:RELATED_TO]->(t:Topic) "
                        + "WHERE p1.Year >= " + startYear + " AND p1.Year <= " + endYear + " AND t.TopicId = " + topic + " "
                        + "WITH p1,  t, r, collect({ paper: p2 }) AS paperCitedFrom "
                        + "ORDER BY paperCitedFrom LIMIT 3 "
                        + "WITH p1, paperCitedFrom, collect({ topic: t, proportion: r.Proportion }) AS topicRelationship "
                        + "ORDER BY topicRelationship LIMIT 3 "
                        + "RETURN p1, paperCitedFrom, topicRelationship LIMIT 3";
            }
            stmt = con.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnsNumber = rsmd.getColumnCount();
            while (rs.next()) {
                Map<String, Object> e = (Map<String, Object>) rs.getObject("p1");
                System.out.println("PaperId: " + e.get("PaperId"));
                JSONObject topicR = new JSONObject(rs.getArray("topicRelationship"));
                System.out.println("topicR: " + topicR.getJSONArray("array").getJSONObject(0).getJSONObject("topic"));
            
                for (int i = 1; i <= columnsNumber; i++) {
                    if (i > 1) System.out.print(",  ");
                    String columnValue = rs.getString(i);
                    System.out.print(columnValue + " " + rsmd.getColumnName(i));
                }
                System.out.println(" ");

//                count++;
//                random = new Random();
//                 //In node với màu ngẫu nhiên 
//                graph.addAttribute("ui.stylesheet", "node:clicked { size: 60px, 60px; text-background-mode: plain; text-background-color: black; text-mode: normal; text-color: white; text-alignment: at-right; text-padding: 3; text-size: 15;} edge { shape: line; fill-mode: dyn-plain; }");
//                
//                //Chuyển thành JSON
//                JSONObject p1Obj = new JSONObject(rs.getString("p1"));
//                String nodeIdP1 = String.valueOf(p1Obj.getInt("id"));
//                JSONArray labelArray = p1Obj.getJSONArray("labels");
//                String nodeLabelP1 = "";
//                for(int i = 0; i < labelArray.length(); i++){
//                    nodeLabelP1 += labelArray.getString(i) + " ";
//                }
//
//                         
//                if(graph.getNode(nodeIdP1) == null) {
//                    
//                    graph.addNode(nodeIdP1);
//                    graph.getNode(nodeIdP1).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
//                    graph.getNode(nodeIdP1).addAttribute("ui.label", "Label: " + nodeLabelP1 + ", ID: " + nodeIdP1);
//                    graph.getNode(nodeIdP1).addAttribute("ui.style", "fill-color: #fb9692, #ff7575; size: 30px, 30px; stroke-mode: plain; stroke-color: #f84f48;text-mode: hidden; shape: pie-chart;");
//                    graph.getNode(nodeIdP1).addAttribute("ui.pie-values", "0.5, 0.5");
//                    
//                }
////                JSONObject p2Obj = new JSONObject(rs.getString("p2"));
////                String nodeIdP2 = String.valueOf(p2Obj.getInt("id"));
////                if(graph.getNode(nodeIdP2) == null) {
////                    graph.addNode(nodeIdP2);
////                    JSONArray labelArrayP2 = p2Obj.getJSONArray("labels");
////                    String nodeLabelP2 = "";
////                    for(int i = 0; i < labelArrayP2.length(); i++){
////                        nodeLabelP2 += labelArrayP2.getString(i) + " ";
////                    }
////                    graph.getNode(nodeIdP2).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
////                    graph.getNode(nodeIdP2).addAttribute("ui.label",  "Label: " + nodeLabelP2 + ", ID: " + nodeIdP2);
////                    graph.getNode(nodeIdP2).addAttribute("ui.style", "fill-color: #fb9692; size: 30px, 30px; stroke-mode: plain; stroke-color: #f84f48; stroke-width: 2px; text-mode: hidden;");
////
////                }
////                
////                // Tạo node Topic nếu chưa có node đó
////                JSONObject tObj = new JSONObject(rs.getString("t"));
////                String nodeIdT = String.valueOf(tObj.getInt("id"));
////                if(graph.getNode(nodeIdT) == null) {
////                    graph.addNode(nodeIdT);
////                    JSONArray labelArrayT = tObj.getJSONArray("labels");
////                    String nodeLabelT = "";
////                    for(int i = 0; i < labelArrayT.length(); i++){
////                        nodeLabelT += labelArrayT.getString(i) + " ";
////                    }
////                    graph.getNode(nodeIdT).setAttribute("xyz", random.nextInt(5), random.nextInt(5), 0);
////                    graph.getNode(nodeIdT).addAttribute("ui.label",  "Label: " + nodeLabelT + ", ID: " + nodeIdT);
////                    graph.getNode(nodeIdT).addAttribute("ui.style", "fill-color: #c0d6e4; size: 40px, 40px; stroke-mode: plain; stroke-color: #8ab3cd; stroke-width: 3px; text-mode: hidden;");
////                }
////                
////                // Nếu chưa có Edge thì thêm Edge
////                if(graph.getEdge(nodeIdP1 + nodeIdP2) == null) {
////                    graph.addEdge(nodeIdP1 + nodeIdP2, nodeIdP1, nodeIdP2);
////                    graph.getEdge(nodeIdP1 + nodeIdP2).addAttribute("ui.style", "fill-color: red;");
////                }
////                if(graph.getEdge(nodeIdP1 + nodeIdT) == null) {
////                    graph.addEdge(nodeIdP1 + nodeIdT, nodeIdP1, nodeIdT);
////                    graph.getEdge(nodeIdP1 + nodeIdT).addAttribute("ui.style", "fill-color: blue; shape: line; arrow-size: 3px, 2px;");
////                }
//                
            }
//        System.out.println("COunt: " + count);
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Tạo View Panel để chứa Graph
        Viewer viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        viewer.enableAutoLayout(); // cho graph chuyển động 
        
        ViewPanel viewPanel = viewer.addDefaultView(false);

        jPanel2.removeAll();
        jPanel2.setLayout(new GridLayout());
        //Panel chứa graph
        jPanel2.add(viewPanel);
        jPanel2.revalidate();
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchPaper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchPaper().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JComboBox<String> displaySeletion;
    private javax.swing.JSpinner endYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner startYear;
    private javax.swing.JComboBox<String> topicSelection;
    // End of variables declaration//GEN-END:variables
}
